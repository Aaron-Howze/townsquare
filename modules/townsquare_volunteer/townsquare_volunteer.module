<?php
/**
 * Townsquare volunteer
 *
 * Includes core content types (volunteer_session), event editing interface,
 * and helper functions for interacting with volunteer hours.  Additional 
 * features can add organization specific displays for volunteer hours.
 */

include_once('townsquare_volunteer.features.inc');

/**
 * Implements hook_menu().
 */
function townsquare_volunteer_menu() {
  $items['event/create'] = array(
    'title' => 'Create event',
    'description' => 'Create event and volunteer sessions',
    'page callback' => 'townsquare_volunteer_edit_event',
    'access callback' => 'node_access',
    'access arguments' => array('create', 'event'),
  );
  $items['event/%node'] = array(
    'title' => 'Edit event',
    'description' => 'Edit an event and volunteer sessions',
    'page callback' => 'townsquare_volunteer_edit_event',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function townsquare_volunteer_menu_alter(&$items) {
  // Rename user tasks
  $items['user/%user/view']['title'] = 'Profile';
  $items['user/%user/edit']['title'] = 'Settings';
}

/**
 * Implements hook_theme().
 */
function townsquare_volunteer_theme() {
  return array(
    // Override theme_field_multiple_value_form to change field order
    'townsquare_volunteer_field_multiple_value_form' => array(
      'render element' => 'element',  
    ),
  );
}

/**
 * Implements hook_permission().
 */
function townsquare_volunteer_permission() {
  return array(
    'access event views' => array(
      'title' => t('Access event Views'),
      'description' => t('Access Drupal Views related to events.'),
    ), 
    'access public volunteer views' => array(
      'title' => t('Access public volunteer views'),
      'description' => t('Access public Drupal Views related to volunteers, 
        such as a list of all public profiles.'),
    ), 
    'view own volunteer hours' => array(
      'title' => t('View own volunteer hours'),
      'description' => t('View one\'s own volunteer hours.'),
    ),
    'view all volunteer hours' => array(
      'title' => t('View all volunteer hours'),
      'description' => t('View everyone\'s volunteer hours.'),
    ),
  );
}

/**
 * Implements hook_library().
 */
function townsquare_volunteer_library() {
  $libraries = array();
  $libraries['jquery.elastic'] = array(
    'title' => 'jQuery elastic textarea plugin',
    'version' => '1.0-alpha1', // @TODO update with real info
    'js' => array(
      drupal_get_path('module', 'townsquare_volunteer')
        .'/lib/jquery.elastic.source.js' => array(),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_form_alter().
 */
function townsquare_volunteer_form_alter(&$form, &$form_state, $form_id) {
  // @TODO Apparently, these need to be attached late
  if ($form_id == 'event_node_form' && arg(0) == 'event') {
    $form['actions']['submit']['#submit'][] = 'townsquare_volunteer_form_event_node_submit';
    $form['actions']['delete']['#submit'][] = 'townsquare_volunteer_form_event_node_delete';
  }
  if ($form_id == 'volunteer_session_node_form' && arg(0) == 'event') {
    $form['actions']['submit']['#submit'][] = 'townsquare_volunteer_volunteer_session_node_submit';
    $form['actions']['delete']['#submit'] = array('townsquare_volunteer_volunteer_session_delete_submit'); 
  }  
}  

/**
 * Implements hook_form_event_node_form_alter().
 * 
 */
function townsquare_volunteer_form_event_node_form_alter(&$form, &$form_state) {
  if (arg(0) == 'event') {
    $form['#prefix'] = '<div id="event-form">';
    $form['#suffix'] = '</div>';

    // Disable title (handled in node_presave);
    $form['title']['#access'] = FALSE;
    $form['title']['#required'] = FALSE;

    // Use ajax only after creation
    if (arg(2) == 'edit') {
      $form['actions']['submit']['#ajax'] = array(
        'callback' => 'townsquare_volunteer_event_node_submit',
        'effect' => 'fade',
        'wrapper' => 'event-form',
      );
    }

    // Bypass node validation by faking 'changed' date
    // See http://www.elvisblogs.org/drupal/solved-how-bypass-nodevalidate-hookformalter
    $form['changed']['#default_value'] = time() + 3600;

    // Strip out form elements; @TODO refine further
    foreach (array('menu', 'comment_settings', 'path', 'author', 'options', 'revision_information', 'node_privacy_byrole', 'additional_Settings', 'buttons') as $key) {
      $form[$key]['#access'] = FALSE;
    }
    foreach (array('premise', 'country') as $key) {
      $form['field_event_location']['und'][0][$key]['#access'] = FALSE;
    }
    $form['actions']['preview']['#access'] = FALSE;    
  }
}

/**
 * Submit/save callback for event editing form
 */
function townsquare_volunteer_form_event_node_submit($form, &$form_state) {
  // Alter redirect
  $form_state['redirect'] = 'event/'. $form_state['node']->nid .'/edit';
  
  // Return form for AJAX callback
  return $form;
}

/**
 * Delete callback for event editing form
 */
function townsquare_volunteer_form_event_node_delete($form, &$form_state) {
  // @TODO cascade delete orphans, dangerous
}

/**
 * Implements hook_form_volunteer_session_node_form_alter().
 */
function townsquare_volunteer_form_volunteer_session_node_form_alter(&$form, &$form_state) {  

  // Add behaviors 
  $form['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'townsquare_volunteer')
        .'/js/townsquare_volunteer-session-edit.js',
    ),
  );
  
  if (arg(0) == 'event' || arg(0) == 'system') {
    $node = $form['#node'];
    $nid = (!empty($node->nid)) ? $node->nid : 'new';
    $event_node = node_load($node->field_session_event['und'][0]['nid']);

    // Set internal 'new' flag for later processing
    $form['new'] = array(
      '#type' => 'value',
      '#value' => ($nid == 'new') ? TRUE : FALSE,
    );

    // Disable title (handled in node_presave);
    $form['title']['#access'] = FALSE;
    $form['title']['#required'] = FALSE;

    $form['#prefix'] = '<div class="volunteer-session-form" id="volunteer-session-form-'. $nid .'">';
    $form['#suffix'] = '</div>';

    $form['actions']['submit']['#ajax'] = array(
      'callback' => 'townsquare_volunteer_volunteer_session_node_ajax_submit',
      'effect' => 'fade',
      'wrapper' => 'volunteer-session-form-'. $nid,
    );
    $form['actions']['delete']['#ajax'] = array(
      'callback' => 'townsquare_volunteer_volunteer_session_delete_submit',
      'effect' => 'fade',
      'wrapper' => 'volunteer-session-form-'. $nid,
    );

    // Bypass node validate, see townsquare_volunteer_form_event_node_form_alter()
    $form['changed']['#default_value'] = time() + 3600;
    
    // Refine further
    foreach (array('menu', 'comment_settings', 'path', 'author', 'options', 'revision_information', 'node_privacy_byrole', 'additional_Settings', 'buttons', 'field_session_event') as $key) {
      $form[$key]['#access'] = FALSE;
    }

    $form['actions']['preview']['#access'] = FALSE;    

    // Set default start and end values based on event node
    // Using the standard widgets means this must be done here, not
    // when the event object is created
    // @TODO make configurable 
    if (empty($form['field_session_hours']['und'][0]['#default_value']['value'])) {
      $event_start = date_create($event_node->field_event_date['und']['0']['value']);
      $event_start_day = date_format($event_start, 'Y-m-d');
      $form['field_session_hours']['und'][0]['#default_value']['value'] = $event_start_day .' 11:00:00';
    }  
    
    if (empty($form['field_session_hours']['und'][0]['#default_value']['value2'])) {
      $event_end = date_create($event_node->field_event_date['und']['0']['value2']);
      $event_end_day = date_format($event_end, 'Y-m-d');
      $form['field_session_hours']['und'][0]['#default_value']['value2'] = $event_end_day .' 17:00:00';
    }
    $form['field_session_hours']['und']['#theme'] = 'townsquare_volunteer_field_multiple_value_form';
  }
}

/**
 * Submit callback for embedded volunteer session edting form
 */
function townsquare_volunteer_volunteer_session_node_submit($form, &$form_state) {
  // Alter redirect
  $form_state['redirect'] = 'event/'. $form_state['node']->field_session_event['und'][0]['nid'] .'/edit';
}

/**
 * AJAX submit callback for embedded volunteer session edting form
 */
function townsquare_volunteer_volunteer_session_node_ajax_submit($form, $form_state) {
  global $user;

  $form_state['rebuild'] = TRUE;
  $form = drupal_rebuild_form($form['#form_id'], $form_state, $form);

  $commands = array();

  if ($form_state['values']['new'] && node_access('create', 'volunteer_session')) {
    // To create the new node form, we need to unset $_POST so that
    // drupal_build_form won't use it to populate $form_state['input']
    unset($_POST);
    
    $event_node = node_load($form['#node']->field_session_event['und'][0]['nid']);
    $new_session = _townsquare_volunteer_create_volunteer_session($event_node);
    $new_form = drupal_get_form('volunteer_session_node_form', 
      $new_session);
    
    $commands[] = ajax_command_invoke('#volunteer-session-form-new', 'townsquareReplace', array(drupal_render($form)));
    $commands[] = ajax_command_append('#volunteer-sessions', drupal_render($new_form));
  }
  else {
    $commands[] = ajax_command_replace('#'. $form['#id'], drupal_render($form));
  }
  
  //$commands[] = ajax_command_append('#volunteer-sessions', theme('status_messages'));
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Volunteer session delete callback
 */
function townsquare_volunteer_volunteer_session_delete_submit($form, &$form_state) {
  $commands[] = ajax_command_replace('#volunteer-session-form-'. $form['#node']->nid, NULL);
  //$commands[] = ajax_command_append('#volunteer-sessions', theme('status_messages'));
  node_delete($form['#node']->nid);
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Integrated, AJAXy form for event + session creation
 *
 * @param $node
 *   Event node object
 * @return
 *   Edit form(s)
 */

// @TODO include below is failing
module_load_include('inc', 'node', 'node.pages');
function townsquare_volunteer_edit_event($node = NULL) {
  global $user;
  
  if ($node && $node->type != 'event') {
    return drupal_not_found();
  }

  module_load_include('inc', 'node', 'node.pages');

  drupal_add_library('townsquare_volunteer', 'jquery.elastic');

  $session_form = array();

  if (!$node) {
    $node = new stdClass();
    $node->type = 'event';
    $node->name = $user->name;
    $node->status = 1;
    $node->promote = 0;
    $node->sticky = 0;
    $node->language = 'und'; // @TODO make language selection more intelligent
  }
  else {
    $session_elements = array();

    if (node_access('create', 'volunteer_session')) {
      $new_session = _townsquare_volunteer_create_volunteer_session($node);
      $session_elements[] = drupal_get_form('volunteer_session_node_form', 
        $new_session);
    }

    $session_nodes = townsquare_volunteer_event_sessions($node->nid);

    foreach ($session_nodes as $session) {
      if (node_access('update', $session)) {
        $session_elements[] = drupal_get_form('volunteer_session_node_form',
          $session);
      }
    }

    if (!empty($session_elements)) {
      $session_form = array(
        '#name' => t('Volunteer sessions'),
        'headers' => array(
          '#theme' => 'item_list',
          '#attributes' => array('id' => 'session-header'),
          '#items' => array(
            array(
              'data' => t('Volunteer name'), 
              'class' => array('session-name'),
            ),
            array(
              'data' => t('Start time'), 
              'class' => array('session-start',)
            ),
            array(
              'data' => t('End time'),
              'class' => array('session-end'),
            ),
            array(
              'data' => t('Override?'),
              'class' => array('session-override-duration'),
            ),
            array(
              'data' => t('Duration'),
              'class' => array('session-duration'),
            ),
            array(
              'data' => t('Role'),
              'class' => array('session-role'),
            ),
            array(
              'data' => t('Notes'),
              'class' => array('session-notes'),
            ),
            array(
              'data' => '', 
              'class' => array('empty'),
            ),
          ),
        ),
        'sessions' => array(
          '#prefix' => '<div id="volunteer-sessions">',
          '#suffix' => '</div>'
        ) + array_reverse($session_elements),
      );
    }
  }
    
  $form = drupal_get_form('event_node_form', $node);
  $output = array(
    'event' => $form,
    'sessions' => $session_form,
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'townsquare_volunteer')
          .'/js/townsquare_volunteer-bulk-edit.js',
        drupal_get_path('module', 'townsquare_volunteer')
          .'/js/autocomplete.js'
      ),
    ),
  );
  
  return $output;
}

/**
 * Implements hook_node_presave().
 */
function townsquare_volunteer_node_presave($node) {
  $lang = LANGUAGE_NONE;

  if ($node->type == 'volunteer_session') { 
    $user = user_load($node->field_session_user[$lang][0]['uid']);
    $event = node_load($node->field_session_event[$lang][0]['nid']);
    
    // Compute volunteer session duration based on flag
    if (!$node->field_session_override_duration[$lang][0]['value']) {
      if (!empty($node->field_session_hours[$lang][0]['value'])) {
        $start = date_create($node->field_session_hours[$lang][0]['value'],
          timezone_open($node->field_session_hours[$lang][0]['timezone']));
      } 
      if (!empty($node->field_session_hours[$lang][0]['value2'])) {
        $end = date_create($node->field_session_hours[$lang][0]['value2'],
          timezone_open($node->field_session_hours[$lang][0]['timezone']));
      } 
      if ($start && $end) {
        $start_timestamp = date_format($start, 'U'); 
        $end_timestamp = date_format($end, 'U'); 
        $elapsed = ($end_timestamp - $start_timestamp) / 3600;
        $node->field_session_duration[$lang][0]['value'] = $elapsed;  
      }
    }

    $node->title = $event->title .': '. $user->name .' ('.
      sprintf("%.2f", $node->field_session_duration[$lang][0]['value']) .' hours)';
  }

  if ($node->type == 'event') { 
    $start = date_create($node->field_event_date[$lang][0]['value'],
      timezone_open($node->field_event_date[$lang][0]['timezone']));
    $term = taxonomy_term_load($node->field_event_type[$lang][0]['tid']);
    $node->title = date_format($start, 'Y-m-d') .' - '. $term->name;
  }
}

/**
 * Get sessions for a given event
 *
 * @param $nid
 *   Event object node ID
 * @return
 *   array of volunteer session node objects
 *  
 */
function townsquare_volunteer_event_sessions($nid) {
  $query = new EntityFieldQuery;
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'volunteer_session')
    ->fieldCondition('field_session_event', 'nid', $nid, '=')
    ->fieldOrderBy('field_session_hours', 'value', 'DESC')
    ->fieldOrderBy('field_session_hours', 'value2', 'DESC');

  $result = $query->execute();
  
  if ($result) {
    return entity_load('node', array_keys($result['node']));
  } 
  return array();
}

/**
 * Get volunteer sessions over a given span of time.
 *
 * @param $users
 *   An array of uids
 * @param $start
 *   (optional) Start time (default: all sessions)
 * @param $end
 *   (optional) End time (default: now)
 * @return
 *   array of volunteer session node objects
 */ 

function townsquare_volunteer_volunteer_sessions($users = array(), $start = NULL, $end = NULL) {
  $query = new EntityFieldQuery;

  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'volunteer_session')
    ->fieldCondition('field_session_user', 'uid', $users, 'in');

  if ($start) {
    $query->fieldCondition('field_session_hours', 'value', $start, '>');
  }
  if ($end) {
    $query->fieldCondition('field_session_hours', 'value2', $end, '<');
  }

  $result = $query->execute();
  
  if ($result) {
    return entity_load('node', array_keys($result['node']));
  }  
  return array();
}

/**
 * Get sessions for a given user
 *
 * @param $uid
 *   uid of user to retrieve sessions for
 * @return
 *   array of volunteer session node objects
 */
function townsquare_volunteer_user_sessions($uid) {
  $query = new EntityFieldQuery;
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'volunteer_session')
    ->fieldCondition('field_session_user', 'uid', $uid, '=')
    ->fieldOrderBy('field_session_hours', 'value', 'DESC')
    ->fieldOrderBy('field_session_hours', 'value2', 'DESC');

  $result = $query->execute();
  
  if ($result) {
    return entity_load('node', array_keys($result['node']));
  } 
  return array();
}

/**
 * Implements theme_townsquare_volunteer_field_value_value_form().
 *
 * We use a theme function to switch date and time in the date popup widget.
 * @TODO You should be able do this higher in the stack, or in a better way.
 */
function theme_townsquare_volunteer_field_multiple_value_form($variables) {
  $element = $variables['element'];

  // Forcibly sort, because setting weight doesn't work
  $date = $element[0]['value']['date'];
  unset($element[0]['value']['date']);
  $element[0]['value']['date'] = $date;

  $date = $element[0]['value2']['date'];
  unset($element[0]['value2']['date']);
  $element[0]['value2']['date'] = $date;
  
  $output = '';
  foreach (element_children($element) as $key) {
    $output .= drupal_render($element[$key]);
  }
  return $output;
}

/**
 * Create a new volunteer session node object with dates and parent NID set 
 * based on event node passed as parameter.
 *
 * @param $node
 *   A node of type 'event'
 * @return
 *   A volunteer session node object
 */
function _townsquare_volunteer_create_volunteer_session($node) {
  global $user;
  if ($node->type == 'event') {
    $empty_session = new stdClass();
    $empty_session->nid = NULL;
    $empty_session->type = 'volunteer_session';
    $empty_session->name = $user->name;
    $empty_session->status = 1;
    $empty_session->promote = 0;
    $empty_session->sticky = 0;
    $empty_session->language = LANGUAGE_NONE;
    $empty_session->field_session_event = array(
      'und' => array(
        array('nid' => $node->nid),
      )
    );
    return $empty_session; 
  }
}
