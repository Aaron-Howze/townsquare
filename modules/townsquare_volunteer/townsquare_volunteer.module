<?php
/**
 * Townsquare volunteer
 *
 * Includes core content types (volunteer_session), event editing interface,
 * and helper functions for interacting with volunteer hours.  Additional 
 * features can add organization specific displays for volunteer hours.
 */

include_once('townsquare_volunteer.features.inc');

/**
 * Implements hook_menu().
 */
function townsquare_volunteer_menu() {
  $items['event/create'] = array(
    'title' => 'Create event',
    'description' => 'Create event and volunteer sessions',
    'page callback' => 'townsquare_volunteer_edit_event',
    'access callback' => TRUE, // @TODO use correct callback
    'access callback' => 'node_access',
    'access arguments' => array('create', 'event'),
  );
  $items['event/%node'] = array(
    'title' => 'Edit event',
    'description' => 'Edit an event and volunteer sessions',
    'page callback' => 'townsquare_volunteer_edit_event',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function townsquare_volunteer_menu_alter(&$items) {
  // Rename user tasks
  $items['user/%user/view']['title'] = 'Profile';
  $items['user/%user/edit']['title'] = 'Settings';
}

/**
 * Implements hook_theme().
 */
function townsquare_volunteer_theme() {
  return array(
    'townsquare_volunteer_event_date_combo' => array(
      'variables' => array('render element' => 'element'),
    ),
  );
}

/**
 * Implements hook_perm().
 */
function townsquare_volunteer_permission() {
  return array(
    'access event views' => array(
      'title' => t('Access event Views'),
      'description' => t('Access Drupal Views related to events.'),
    ), 
    'access public volunteer views' => array(
      'title' => t('Access public volunteer views'),
      'description' => t('Access public Drupal Views related to volunteers, 
        such as a list of all public profiles.'),
    ), 
    'view own volunteer hours' => array(
      'title' => t('View own volunteer hours'),
      'description' => t('View one\'s own volunteer hours.'),
    ),
    'view all volunteer hours' => array(
      'title' => t('View all volunteer hours'),
      'description' => t('View everyone\'s volunteer hours.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function townsquare_volunteer_form_alter(&$form, &$form_state, $form_id) {
  // THIS IS SO CONFUZZLING, alter order has never made enough sense to me
  if ($form_id == 'event_node_form' && arg(0) == 'event') {
    $form['actions']['submit']['#submit'][] = 'townsquare_volunteer_form_event_node_submit';
    $form['actions']['delete']['#submit'][] = 'townsquare_volunteer_form_event_node_delete';
  }
  if ($form_id == 'volunteer_session_node_form' && arg(0) == 'event') {
    $form['actions']['submit']['#submit'][] = 'townsquare_volunteer_form_volunteer_session_node_submit';
  }  
}  

/**
 * Implements hook_form_event_node_form_alter().
 * 
 */
function townsquare_volunteer_form_event_node_form_alter(&$form, &$form_state) {
  if (arg(0) == 'event') {
    $form['#prefix'] = '<div id="event-form">';
    $form['#suffix'] = '</div>';

    // Use ajax only after creation
    if (arg(2) == 'edit') {
      $form['actions']['submit']['#ajax'] = array(
        'callback' => 'townsquare_volunteer_return_submit',
        'effect' => 'fade',
        'wrapper' => 'event-form',
      );
    }

    // Bypass node validation by faking 'changed' date
    // See http://www.elvisblogs.org/drupal/solved-how-bypass-nodevalidate-hookformalter
    $form['changed']['#default_value'] = time() + 3600;

    // Strip out form elements; @TODO refine further
    foreach (array('menu', 'comment_settings', 'path', 'author', 'options', 'revision_information', 'node_privacy_byrole', 'additional_Settings', 'buttons') as $key) {
      $form[$key]['#access'] = FALSE;
    }
    foreach (array('premise', 'country') as $key) {
      $form['field_event_location']['und'][0][$key]['#access'] = FALSE;
    }
    $form['actions']['preview']['#access'] = FALSE;    
  }
}

/**
 * Submit/save callback for event editing form
 */
function townsquare_volunteer_form_event_node_submit($form, &$form_state) {
  // Alter redirect
  $form_state['redirect'] = 'event/'. $form_state['node']->nid .'/edit';
}

/**
 * Delete callback for event editing form
 */
function townsquare_volunteer_form_event_node_delete($form, &$form_state) {
  // @TODO cascade delete orphans, dangerous
}


/**
 * Submit/save callback for embedded volunteer session editing form
 */
function townsquare_volunteer_form_volunteer_session_node_submit($form, &$form_state) {
  // Alter redirect
  $form_state['redirect'] = 'event/'. $form_state['node']->field_session_event['und'][0]['nid'] .'/edit';
}

/**
 * Implements hook_form_volunteer_session_node_form_alter().
 */
function townsquare_volunteer_form_volunteer_session_node_form_alter(&$form, &$form_state) {
  if (arg(0) == 'event') {
    $node = $form['#node'];
    $nid = (!empty($node->nid)) ? $node->nid : 'new';
    $form['#prefix'] = '<div class="volunteer-session-form" id="volunteer-session-form-'. $nid .'">';
    $form['#suffix'] = '</div>';

    // Only use AJAX if there's an nid (@TODO support ajax!)
    if (!empty($node->nid)) {
      $form['actions']['submit']['#ajax'] = array(
        'callback' => 'townsquare_volunteer_return_submit',
        'effect' => 'fade',
        'wrapper' => 'event-form-'. $nid,
      );
    }

    // Bypass node validate, see townsquare_volunteer_form_event_node_form_alter()
    $form['changed']['#default_value'] = time() + 3600;
    
    // Refine further
    foreach (array('menu', 'comment_settings', 'path', 'author', 'options', 'revision_information', 'node_privacy_byrole', 'additional_Settings', 'buttons') as $key) {
      $form[$key]['#access'] = FALSE;
    }
    $form['actions']['preview']['#access'] = FALSE;    

    $form['field_session_event']['und'][0]['#access'] = FALSE;
    if (!$form['field_session_event']['und'][0]['nid']['#default_value']) {
      $form['field_session_event']['und'][0]['nid']['#default_value'] = arg(1);
    }

    // @TODO add magic date widget
    /*foreach (element_children($form['field_session_hours']['und']) as $key => $value) {
      $form['field_session_hours']['und'][$key]['#theme'] = 'townsquare_volunteer_event_date_combo';
    }*/
  }
}

function townsquare_volunteer_return_submit($form, $form_state) {
  // @TODO We rebuild the form, we can create a new node in place, but if we do
  // that, we also screw up the volunteer editing list -- values somehow get
  // assigned to the wrong form when they are POSTed.
  /*$form_state['rebuild'] = TRUE;
  drupal_rebuild_form($form['#form_id'], $form_state, $form);*/
  return $form;
}

/**
 * Integrated, AJAXy form for event + session creation
 */
module_load_include('inc', 'node', 'node.pages'); // @TODO something failing...
function townsquare_volunteer_edit_event($node = NULL) {
  global $user;
  
  if ($node && $node->type != 'event') {
    return drupal_not_found();
  }

  module_load_include('inc', 'node', 'node.pages');

  drupal_add_js(drupal_get_path('module', 'townsquare_volunteer') .'/lib/jquery.elastic.source.js');
  drupal_add_js(drupal_get_path('module', 'townsquare_volunteer') .'/js/townsquare_volunteer.js');
  
  $session_form = array();

  if (!$node) {
    $node = new stdClass();
    $node->type = 'event';
    $node->name = $user->name;
    $node->status = 1;
    $node->promote = 0;
    $node->sticky = 0;
    $node->language = 'und'; // @TODO make language selection more intelligent
  }
  else {
    $session_elements = array();

    if (node_access('create', 'volunteer_session')) {
      // @TODO why does order matter here?!
      $empty_session = new stdClass();
      $empty_session->nid = NULL;
      $empty_session->type = 'volunteer_session';
      $empty_session->name = $user->name;
      $node->status = 1;
      $node->promote = 0;
      $node->sticky = 0;
      $empty_session->language = 'und';
      $session_elements[] = drupal_get_form('volunteer_session_node_form', 
        $empty_session);
    }

    $session_nodes = townsquare_volunteer_event_sessions($node->nid);

    foreach ($session_nodes as $session) {
      if (node_access('update', $session)) {
        $session_elements[] = drupal_get_form('volunteer_session_node_form',
          $session);
      }
    }

    if (!empty($session_elements)) {
      $session_form = array(
        '#name' => t('Volunteer sessions'),
        'headers' => array(
          '#theme' => 'item_list',
          '#attributes' => array('id' => 'session-header'),
          '#items' => array(
            array(
              'data' => t('Volunteer name'), 
              'class' => array('volunteer-name'),
            ),
            array(
              'data' => t('Start time'), 
              'class' => array('volunteer-start',)
            ),
            array(
              'data' => t('End time'),
              'class' => array('volunteer-end'),
            ),
            array(
              'data' => t('Role'),
              'class' => array('volunteer-role'),
            ),
            array(
              'data' => t('Notes'),
              'class' => array('volunteer-notes'),
            ),
            array(
              'data' => '', 
              'class' => array('empty'),
            ),
          ),
        ),
        'sessions' => array_reverse($session_elements),
      );
    }
  }
    
  $form = drupal_get_form('event_node_form', $node);
  $output = array(
    'event' => $form,
    'sessions' => $session_form,
  );
  
  return $output;
}

/**
 * Get sessions for a given event
 *
 * @param
 */
function townsquare_volunteer_event_sessions($nid) {
  $query = new EntityFieldQuery;
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'volunteer_session')
    ->fieldCondition('field_session_event', 'nid', $nid, '=')
    ->fieldOrderBy('field_session_hours', 'value', 'DESC')
    ->fieldOrderBy('field_session_hours', 'value2', 'DESC');

  $result = $query->execute();
  
  if ($result) {
    return entity_load('node', array_keys($result['node']));
  } 
  return array();
}


function townsquare_volunteer_init() {
  if (arg(0) == 'user' && is_numeric(arg(1))) {
    $users = entity_load('user', array(arg(1)));
    $sessions = townsquare_volunteer_volunteer_sessions(array_keys($users), '2011-01-15 17:15:00', '2011-01-17 00:00:00');
  }
}

/**
 * Get volunteer sessions over a given span of time.
 *
 * @param $users
 *   An array of uids
 * @param $start
 *   (optional) Start time (default: all sessions)
 * @param $end
 *   (optional) End time (default: now)
 */ 

function townsquare_volunteer_volunteer_sessions($users = array(), $start = NULL, $end = NULL) {
  $query = new EntityFieldQuery;

  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'volunteer_session')
    ->fieldCondition('field_session_user', 'uid', $users, 'in');

  if ($start) {
    $query->fieldCondition('field_session_hours', 'value', $start, '>');
  }
  if ($end) {
    $query->fieldCondition('field_session_hours', 'value2', $end, '<');
  }

  $result = $query->execute();
  
  if ($result) {
    return entity_load('node', array_keys($result['node']));
  }  
}

function townsquare_volunteer_event_date_combo($element) {
  $element = $vars['element'];
  $field = field_info_field($element['#field_name']);
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);

  if (!$field['settings']['todate']) {
    return $element['#children'];
  }

  // Group from/to items together in fieldset.
  $fieldset = array(
    '#title' => check_plain($instance['label']) . ' ' . ($element['#delta'] > 0 ? intval($element['#delta'] + 1) : ''),
    '#value' => '',
    '#description' => $element['#fieldset_description'],
    '#attributes' => array(),
    '#children' => $element['#children'],
  );
  return theme('fieldset', array('element' => $fieldset));
}

/**
 * Implements hook_block_info().
 */
function townsquare_volunteer_block_info() {
  // A simple summation of all a volunteers hours
  $blocks['volunteer_hours'] = array(
    'info' => t('Volunteer hours'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/** 
 * Implements hook_block_view().
 */
function townsquare_volunteer_block_view($delta = '') {
  global $user;
  $block = array();

  switch ($delta) {
    case 'volunteer_hours':
      if (arg(0) == 'user' && is_numeric(arg(1))) {
        $volunteer = user_load(arg(1));

        if (!(user_access('view all volunteer hours', $user) 
          || (user_access('view own volunteer hours') 
             && $user->uid == $volunteer->uid))) {
          break;
        }

        $total = 0;
        $now = date_create('now', timezone_open($volunteer->timezone));

        $query = new EntityFieldQuery;
        $query
          ->entityCondition('entity_type', 'node')
          ->propertyCondition('type', 'volunteer_session')
          ->fieldOrderBy('field_session_hours', 'value', 'DESC')
          ->fieldCondition('field_session_user', 'uid', $volunteer->uid, '=')
          ->fieldOrderBy('field_session_hours', 'value2', 'DESC');

        $result = $query->execute();
        $sessions = ($result) ? entity_load('node', array_keys($result['node'])) : array();

        $table = array(
          '#theme' => 'table',
          '#header' => array(t('Event'), t('Date'), t('Start'), t('End'), t('Hours'), t('Notes')),
          '#rows' => array(),
        );
        foreach ($sessions as $session) {
          $event = node_load($session->field_session_event['und'][0]['nid']);
          $event_type = taxonomy_term_load($event->field_event_type['und'][0]['tid']);

          $start = date_create($session->field_session_hours['und'][0]['value'],
            timezone_open($session->field_session_hours['und'][0]['timezone']));
          $end = date_create($session->field_session_hours['und'][0]['value2'],
            timezone_open($session->field_session_hours['und'][0]['timezone']));
          
          $start_timestamp = date_timestamp_get($start);
          $end_timestamp = date_timestamp_get($end);
          
          $elapsed = $end_timestamp - $start_timestamp;
          
          $notes = (!empty($session->field_session_notes['und'][0]['value'])) ?
            $session->field_session_notes['und'][0]['value'] : NULL;

          $table['#rows'][] = array(
            $event_type->name,
            date_format($start, 'M j Y'),
            date_format($start, 'g:ia'),
            date_format($end, 'g:ia'),
            array(
              'class' => 'hours', 
              'data' => sprintf('%01.2f', $elapsed / 3600)
            ),
            array('class' => 'notes', 'data' => $notes),
          );

          $total += $elapsed;
        }

        $recent_sessions = array();
        $recent_total = 0;
        date_modify($now, '-3 months');
        $query->fieldCondition('field_session_hours', 'value', date_format($now, 'Y-m-d H:i:s'), '>');
        $result = $query->execute();
        $recent_sessions = ($result) ? entity_load('node', array_keys($result['node'])) : $recent_sessions;
        foreach ($recent_sessions as $session) {
          $start = date_create($session->field_session_hours['und'][0]['value'],
            timezone_open($session->field_session_hours['und'][0]['timezone']));
          $end = date_create($session->field_session_hours['und'][0]['value2'],
            timezone_open($session->field_session_hours['und'][0]['timezone']));
          
          $start_timestamp = date_timestamp_get($start);
          $end_timestamp = date_timestamp_get($end);
          
          $elapsed = $end_timestamp - $start_timestamp;
          $recent_total += $elapsed;
        }

        $totals = array(
          '#theme' => 'table',
          '#attributes' => array('class' => 'summary'),
          '#rows' => array(
            array(
              array('header' => TRUE, 'data' => t('Past 3 months')),
              sprintf('%01.2f', $recent_total / 3600)
            ),
            array(
              array('header' => TRUE, 'data' => t('Total')),
              sprintf('%01.2f', $total / 3600)
            ),
          ),
        );


        $block['subject'] = t("@volunteer's hours", array('@volunteer' => $volunteer->name));
        $block['content'] = array(
          'totals' => $totals,
          'table' => $table,
        );
      }
  }
  return $block;
}

/**
 * Get sessions for a given user
 */
function townsquare_volunteer_user_sessions($uid) {
  $query = new EntityFieldQuery;
  $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'volunteer_session')
    ->fieldCondition('field_session_user', 'uid', $uid, '=')
    ->fieldOrderBy('field_session_hours', 'value', 'DESC')
    ->fieldOrderBy('field_session_hours', 'value2', 'DESC');

  $result = $query->execute();
  
  if ($result) {
    return entity_load('node', array_keys($result['node']));
  } 
  return array();
}
