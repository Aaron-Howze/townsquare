<?php
/**
 * Townsquare core
 *
 * This module provides the fundamental building blocks for the Townsquare
 * project.
 */ 

include_once('townsquare_core.features.inc');

/**
 * Implements hook_menu().
 */
function townsquare_core_menu() {
  $items['event/create'] = array(
    'title' => 'Create event',
    'description' => 'Create event and volunteer sessions',
    'page callback' => 'townsquare_core_edit_event',
    //'access arguments' => array('create event content', 'create volunteer session content'),
    'access callback' => TRUE,
  );
  $items['event/%node'] = array(
    'title' => 'Edit event',
    'description' => 'Edit an event and volunteer sessions',
    'page callback' => 'townsquare_core_edit_event',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Integrated, AJAXy form for event + session creation
 */
function townsquare_core_edit_event($node = NULL) {
  // Create event forms...
  if (!$node || $node->type == 'event') {
    dpm($node);
    return 'stub';
  }
  else {
    // access denied...
  }
}
/**
 * Implements hook_theme().
 */
function townsquare_core_theme() {
  return array(
    'townsquare_login' => array(
      'variables' => array('user' => NULL),
      'template' => 'townsquare-login',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function townsquare_core_block_info() {
  $blocks['login']['info'] = t('Townsquare: User login & profile');
  $blocks['login']['cache'] = DRUPAL_NO_CACHE;

  $blocks['primary_tasks']['info'] = t('Townsquare: Primary local tasks');
  $blocks['primary_tasks']['cache'] = DRUPAL_NO_CACHE;
  
  $blocks['secondary_tasks']['info'] = t('Townsquare: Secondary local tasks');
  $blocks['secondary_tasks']['cache'] = DRUPAL_NO_CACHE;
  
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function townsquare_core_block_view($delta = '') {
  global $user;

  $block = array();

  switch ($delta) {
    case 'login':
      $block['content'] = theme('townsquare_login');
      return $block;

    case 'primary_tasks':
      if ($tasks = menu_primary_local_tasks()) {
        $block['content'] = render($tasks);
        return $block;
      }

    case 'secondary_tasks':
      if ($tasks = menu_secondary_local_tasks()) {
        $block['content'] = render($tasks);
        return $block;
      }

  }
}

/**
 * Townsquare login block
 */
function template_preprocess_townsquare_login(&$vars) {
  global $user;
  $vars['user'] = $user;
}


/**
 * Implements hook_field_formatter_info().
 */
function townsquare_core_field_formatter_info() {
  return array(
    // Duration calculated from to-from dates
    'duration' => array(
      'label' => t('Duration'),
      'field types' => array('date', 'datetime', 'datestamp'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function townsquare_core_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'duration':
      foreach ($items as $delta => $item) {
        $start = new DateObject($item['value'], $item['timezone']);
        $end = new DateObject($item['value2'], $item['timezone']);
        $element[$delta]['#markup'] = '<span class="date-display-duration">'. 
          t('@time hrs', array('@time' => $start->difference($end) / 3600)) .
          '</span>';
      }
      break;

  }
  return $element;
}
